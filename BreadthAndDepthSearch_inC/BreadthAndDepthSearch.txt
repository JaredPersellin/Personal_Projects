#include "myheader.h"
/*snippet Manual depth first and breadth search*/
void depth(Vertex* vertices[]) {
    Stack vertexStack;
    Vertex* topVertex;
    Edge* nextEdge;
    vertexStack.size = 0;
    printf("Depth first :\t");
    int i;
    for (i = 0; i < VERTICES; i++) {
        if (vertices[i]->letter == '?') {
            vertices[0]->seen = true;
            printf("%c", vertices[0]->letter);
            stackPush(&vertexStack, vertices[0]);
            break;
        }
        vertices[i]->seen = false;
    }
    while (vertexStack.size != 0) {
        topVertex = stackPeek(&vertexStack);
        nextEdge = topVertex->edges;
        while (nextEdge != NULL) {
            if (!nextEdge->connectingVertex->seen) {
                nextEdge->connectingVertex->seen = true;
                printf("%c", nextEdge->connectingVertex->letter);
                stackPush(&vertexStack, nextEdge->connectingVertex);
                topVertex = nextEdge->connectingVertex;
                nextEdge = topVertex->edges;
            }
            else {
                nextEdge = nextEdge->nextEdge;
            }
        }
        stackPop(&vertexStack);
    }
    printf("\n");
}
void breadth(Vertex* vertices[]) {
   Queue vertexQueue;
   Vertex* front;
   Edge* nextEdge;
   vertexQueue.size = 0;
   int i;
   printf("Breadth first:\t");
   for (i = 0; i < VERTICES; i++) {
       if (vertices[i]->letter == '?') {
            printf("%c", vertices[0]->letter);
            queueInsert(&vertexQueue, vertices[0]);
            break;
        }
        vertices[i]->seen = false;
    }
    while (vertexQueue.size != 0) {
        front = queuePeekFront(&vertexQueue);
        nextEdge = front->edges;
        while (nextEdge != NULL) {
            if (!nextEdge->connectingVertex->seen) {
                nextEdge->connectingVertex->seen = true;
                queueInsert(&vertexQueue, nextEdge->connectingVertex);
                printf("%c", nextEdge->connectingVertex->letter);
            }
            nextEdge = nextEdge->nextEdge;
        }
        getFront(&vertexQueue);
    }
    printf("\n");
}


